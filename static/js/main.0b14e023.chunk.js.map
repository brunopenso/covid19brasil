{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","lConfirmedCases","lDeathCases","calc","lastValue","newValue","substring","data","forEach","element","PConfirmedCases","confirmedCases","PDeathCases","deathCases","className","href","target","rel","width","aspect","minWidth","strokeDasharray","dataKey","layout","align","verticalAlign","iconSize","barSize","fill","name","type","stroke","activeDot","r","height","margin","top","right","left","bottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRA0FeA,MA5Ef,WACE,IAAIC,EACAC,EAUJ,SAASC,EAAKC,EAAWC,GAGvB,OAFmB,GAAgC,KAA5B,EAAGD,EAAYC,IAEpBC,UAAU,EAAE,GAGhC,OAfAC,EAAKC,SAAQ,SAAAC,GACPR,EAAkB,GAAKC,EAAc,IACvCO,EAAQC,gBAAkBP,EAAKF,EAAiBQ,EAAQE,gBACxDF,EAAQG,YAAcT,EAAKD,EAAaO,EAAQI,aAElDZ,EAAkBQ,EAAQE,eAC1BT,EAAcO,EAAQI,cAUtB,yBAAKC,UAAU,OACb,6BACE,uBAAGA,UAAU,cAAb,sEAIF,6BACE,uBAAGA,UAAU,cAAb,uEAGA,uBAAGA,UAAU,aAAb,0GACgG,mCADhG,sBAC2H,uBAAGC,KAAK,iDAAiDC,OAAO,SAASC,IAAI,uBAA7E,iCAI7H,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAqBI,MAAM,MAAMC,OAAQ,IAAKC,SAAU,KACtD,kBAAC,IAAD,CACEb,KAAMA,GAEN,kBAAC,IAAD,CAAec,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQC,OAAO,WAAWC,MAAM,SAASC,cAAc,SAASC,SAAS,OACzE,kBAAC,IAAD,CAAKJ,QAAQ,kBAAkBK,QAAS,GAAIC,KAAK,UAAUC,KAAK,oCAChE,kBAAC,IAAD,CAAMC,KAAK,WAAWR,QAAQ,iBAAiBS,OAAO,UAAUC,UAAW,CAAEC,EAAG,GAAKJ,KAAK,yBAIhG,yBAAKf,UAAU,aACb,kBAAC,IAAD,CAAqBI,MAAM,MAAMC,OAAQ,IAAKC,SAAU,KACtD,kBAAC,IAAD,CACIF,MAAO,IACPgB,OAAQ,IACR3B,KAAMA,EACN4B,OAAQ,CACNC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAGvC,kBAAC,IAAD,CAAelB,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQC,OAAO,WAAWC,MAAM,SAASC,cAAc,SAASC,SAAS,OACzE,kBAAC,IAAD,CAAKJ,QAAQ,cAAcK,QAAS,GAAIC,KAAK,UAAUC,KAAK,oCAC5D,kBAAC,IAAD,CAAMC,KAAK,WAAWR,QAAQ,aAAaS,OAAO,UAAUC,UAAW,CAAEC,EAAG,GAAKJ,KAAK,iBCpElFW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0b14e023.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport data from './data/index'\n/*\nimport {\n  ComposedChart, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip,\n  Legend, Scatter,\n} from 'recharts';*/\n\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  Bar, ComposedChart, ResponsiveContainer\n} from 'recharts';\n\nfunction App() {\n  let lConfirmedCases\n  let lDeathCases\n  data.forEach(element => {\n    if (lConfirmedCases > 0 && lDeathCases > 0) {\n      element.PConfirmedCases = calc(lConfirmedCases, element.confirmedCases)\n      element.PDeathCases = calc(lDeathCases, element.deathCases)\n    }\n    lConfirmedCases = element.confirmedCases\n    lDeathCases = element.deathCases\n  });\n\n  function calc(lastValue, newValue) {\n    const percentage = ''+(1-(lastValue / newValue)) * 100\n\n    return percentage.substring(0,5)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <p className=\"App-header\">\n          Covid-19 Brasil - Acompanhamento do Gráfico e simulações\n        </p>\n      </div>\n      <div>\n        <p className=\"MediumText\">\n          Os dados são coletados das fontes oficias sempre no final do dia\n        </p>\n        <p className=\"SmallText\">\n          Para atualizar os dados deste gráfico é necessário fazer um update no arquivo dentro da pasta <b>data</b> no repositório <a href=\"https://github.com/brunopenso/covid19brasilsrc\" target=\"_blank\" rel=\"noopener noreferrer\">brunopenso/covid19brasilsrc</a>\n        </p>\n      </div>\n      \n      <div className=\"flex-container\">\n        <div className=\"container\">\n          <ResponsiveContainer width='90%' aspect={1.6} minWidth={300}>\n            <ComposedChart\n              data={data}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip />\n              <Legend layout=\"vertical\" align=\"center\" verticalAlign=\"bottom\" iconSize=\"12\"/>\n              <Bar dataKey=\"PConfirmedCases\" barSize={20} fill=\"#413ea0\" name=\"% de casos em relação D-1\"/>\n              <Line type=\"monotone\" dataKey=\"confirmedCases\" stroke=\"#8884d8\" activeDot={{ r: 2 }} name=\"casos confirmados\"/>\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"container\">\n          <ResponsiveContainer width='90%' aspect={1.6} minWidth={300}>\n            <ComposedChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                  top: 5, right: 30, left: 20, bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend layout=\"vertical\" align=\"center\" verticalAlign=\"bottom\" iconSize=\"12\"/>\n                <Bar dataKey=\"PDeathCases\" barSize={20} fill=\"#413ea0\" name=\"% de casos em relação D-1\"/>\n                <Line type=\"monotone\" dataKey=\"deathCases\" stroke=\"#8884d8\" activeDot={{ r: 8 }} name=\"Mortes\"/>\n              </ComposedChart>\n            </ResponsiveContainer>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n/*\n<ComposedChart\n          width={500}\n          height={400}\n          data={data}\n          margin={{\n            top: 20, right: 20, bottom: 20, left: 20,\n          }}\n        >\n        <CartesianGrid stroke=\"#f5f5f5\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"deathCases\" barSize={20} fill=\"#413ea0\" />\n          <Line type=\"monotone\" dataKey=\"confirmedCases\" stroke=\"#ff7300\" />\n        </ComposedChart>\n*/\n//<Area type=\"monotone\" dataKey=\"amt\" fill=\"#8884d8\" stroke=\"#8884d8\" />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}